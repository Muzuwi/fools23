import argparse
from typing import *

c000 = [
    0xEA, 0x22, 0xAD, 0x8C, 0x38, 0xAE, 0xDC, 0x96, 0xE7, 0x1F, 0x9D, 0x51, 0xE2, 0x23, 0x10, 0x07,
    0x72, 0xE4, 0x06, 0xA2, 0x1B, 0x5B, 0xEF, 0x17, 0x0B, 0x92, 0xFB, 0xD3, 0x94, 0x80, 0x9F, 0xBD,
    0x1E, 0x76, 0x2D, 0x6F, 0x6E, 0x3A, 0x3E, 0xA9, 0x8D, 0x77, 0x55, 0xF1, 0xA3, 0xF0, 0xB0, 0x31,
    0x53, 0xCE, 0xCB, 0x8F, 0x44, 0x19, 0xD5, 0x79, 0x75, 0xF9, 0xA8, 0x7A, 0x97, 0x11, 0xE9, 0x00,
    0xBA, 0xF4, 0x65, 0x35, 0x7D, 0x70, 0x83, 0xC8, 0x98, 0x0F, 0xB4, 0x45, 0x0A, 0x16, 0xE6, 0x99,
    0xA0, 0x7B, 0xA4, 0x57, 0x9B, 0xF3, 0x54, 0x73, 0x87, 0x27, 0x2C, 0x5C, 0x7F, 0x68, 0x3C, 0xB1,
    0x18, 0xD9, 0x37, 0x90, 0x62, 0x74, 0x1A, 0x82, 0xD2, 0xC4, 0xBC, 0x78, 0x40, 0x9E, 0xB2, 0xB7,
    0x46, 0xE8, 0x25, 0x86, 0x02, 0xA5, 0xDD, 0x58, 0x64, 0xC2, 0xC5, 0xCF, 0x4B, 0xCD, 0x61, 0x20,
    0x3B, 0x84, 0x5F, 0x49, 0x4D, 0xB3, 0xDB, 0xE3, 0xEB, 0x59, 0x39, 0x9A, 0x69, 0xB6, 0x60, 0x8B,
    0xEE, 0x03, 0xFC, 0x8A, 0xDF, 0xFA, 0x26, 0xAC, 0xFE, 0x95, 0x14, 0x4F, 0xA6, 0x30, 0x42, 0x32,
    0x81, 0x2B, 0xEC, 0x2F, 0x6B, 0x52, 0x41, 0x04, 0xF5, 0xE5, 0x5E, 0xD6, 0x4E, 0xE0, 0x1C, 0xB8,
    0x24, 0x13, 0xF7, 0x2E, 0x1D, 0x33, 0x67, 0x43, 0xBB, 0xB9, 0x05, 0x6D, 0xAA, 0xD8, 0x3F, 0xF6,
    0x36, 0xD7, 0x4C, 0x89, 0xD4, 0x29, 0xBE, 0x28, 0x6A, 0xF8, 0x0D, 0xD1, 0xDE, 0xD0, 0x88, 0x0E,
    0xAF, 0x91, 0xC7, 0x66, 0xCC, 0x4A, 0xED, 0x9C, 0x56, 0x21, 0x01, 0x3D, 0xC0, 0xBF, 0x5D, 0xC1,
    0xC3, 0x6C, 0x8E, 0x47, 0x71, 0x63, 0xA7, 0x5A, 0x85, 0xFF, 0x15, 0x12, 0xB5, 0xC6, 0xFD, 0x34,
    0x0C, 0xAB, 0xF2, 0xE1, 0x08, 0x2A, 0xA1, 0xCA, 0x48, 0x7C, 0x50, 0x09, 0x7E, 0xDA, 0xC9, 0x93,
    0x7A, 0x35, 0xDA, 0x76, 0xD1, 0x7F, 0xE5, 0xE1, 0x0B, 0xB4, 0x90, 0xE4, 0x79, 0x3B, 0x96, 0xF4,
    0x43, 0x2F, 0x58, 0xA5, 0x70, 0x00, 0x8D, 0x94, 0x21, 0x34, 0x18, 0x98, 0xDE, 0xFC, 0x39, 0xA9,
    0x25, 0xD7, 0x74, 0x32, 0xD9, 0xEF, 0xA1, 0xB0, 0xFD, 0x7E, 0x69, 0xC8, 0xE6, 0x4F, 0x9F, 0xCF,
    0x67, 0xA2, 0xE9, 0x22, 0x61, 0x48, 0xAF, 0x12, 0x62, 0x8C, 0xF0, 0xBD, 0x82, 0x6C, 0xB8, 0xE2,
    0xD0, 0x6B, 0x7C, 0x93, 0x56, 0x87, 0x54, 0x5B, 0x8B, 0x09, 0x85, 0x10, 0xB7, 0xDC, 0x72, 0xB1,
    0xAA, 0x37, 0x2A, 0x1E, 0xEE, 0x1C, 0x08, 0x04, 0xCB, 0x75, 0x80, 0x17, 0x19, 0xC0, 0x7B, 0x81,
    0xA0, 0x30, 0xED, 0x45, 0xD8, 0x13, 0x68, 0x99, 0x4D, 0x71, 0xF5, 0xB2, 0xD6, 0x2C, 0x0F, 0x02,
    0x5A, 0xA4, 0xEB, 0xF2, 0x57, 0xE0, 0x38, 0x49, 0xEC, 0x95, 0x9C, 0x2D, 0x07, 0x23, 0x5C, 0x1D,
    0xFE, 0x44, 0xC7, 0x9E, 0x16, 0x97, 0x9D, 0xA6, 0xB9, 0xD4, 0x27, 0x3A, 0x28, 0x4C, 0xA8, 0xD3,
    0xF7, 0x3D, 0xAD, 0xF6, 0x63, 0x9B, 0xC6, 0xAE, 0x06, 0xE7, 0xC4, 0x65, 0x40, 0xA7, 0x6E, 0xFB,
    0x0C, 0x92, 0x47, 0x3C, 0x0E, 0x66, 0x78, 0xDF, 0x60, 0x4B, 0xE8, 0x53, 0x52, 0xFA, 0x1A, 0x73,
    0xD5, 0x2B, 0xF8, 0x14, 0xDB, 0x88, 0xD2, 0x15, 0x03, 0x26, 0xC5, 0x4A, 0x86, 0x91, 0x83, 0x3F,
    0x89, 0x9A, 0xEA, 0xCA, 0xAC, 0x6A, 0xA3, 0xDD, 0x29, 0x3E, 0xCC, 0x59, 0x77, 0x50, 0x33, 0xAB,
    0x20, 0xF3, 0x2E, 0x51, 0xB3, 0xBC, 0x11, 0xF1, 0x5E, 0x4E, 0x8F, 0x84, 0x0D, 0x8E, 0x6F, 0xBB,
    0x36, 0xCE, 0x6D, 0xBF, 0x46, 0x42, 0x1B, 0x01, 0xE3, 0xC1, 0xC3, 0x31, 0x7D, 0x24, 0x05, 0x5F,
    0x1F, 0x0A, 0x64, 0xBE, 0xFF, 0x5D, 0xC9, 0xBA, 0xC2, 0xB5, 0xF9, 0xB6, 0x8A, 0x55, 0xCD, 0x41,
    0xB4, 0x93, 0xBA, 0xDD, 0x99, 0x22, 0x30, 0x06, 0x27, 0x64, 0xD1, 0x2B, 0xED, 0x1B, 0x3A, 0xB8,
    0x3D, 0x84, 0x4E, 0x9B, 0x6E, 0x60, 0xB9, 0xBC, 0xB6, 0xFE, 0x7C, 0x0F, 0xB7, 0x70, 0x39, 0x9C,
    0x57, 0xCF, 0x2C, 0xBB, 0x28, 0xA2, 0x10, 0x31, 0x6B, 0xA6, 0x7F, 0x81, 0xC1, 0xA3, 0xF8, 0x85,
    0x26, 0x0A, 0xD7, 0x46, 0x1E, 0xDA, 0x01, 0xB5, 0xDE, 0xD6, 0x3E, 0x3B, 0xA1, 0x5D, 0xFC, 0x79,
    0xA0, 0x90, 0x55, 0xF1, 0xCC, 0xAD, 0x02, 0xF6, 0x12, 0x19, 0x20, 0xCD, 0x75, 0xB2, 0xF7, 0x4B,
    0x9D, 0x2D, 0xF2, 0x94, 0xC8, 0xE1, 0xEC, 0xBD, 0x73, 0xA4, 0xD9, 0x2A, 0xD8, 0x42, 0x13, 0x87,
    0xB3, 0xE4, 0xE0, 0x34, 0x61, 0x29, 0x7B, 0x88, 0xE9, 0x8A, 0xBF, 0x74, 0xF0, 0x1F, 0x18, 0x5C,
    0x37, 0x51, 0x80, 0x7E, 0x0D, 0x76, 0xAA, 0x72, 0xAF, 0xFD, 0xF4, 0xDC, 0x21, 0x14, 0xEF, 0xE8,
    0xA5, 0xDF, 0x95, 0x25, 0xF9, 0x09, 0x49, 0x47, 0x52, 0xE5, 0xA9, 0x86, 0xA7, 0x8D, 0x63, 0xC6,
    0x4D, 0xEB, 0x66, 0x3F, 0x82, 0x6C, 0xC9, 0xD5, 0x43, 0x58, 0xE6, 0x33, 0x77, 0x0E, 0xEE, 0x53,
    0x3C, 0x9E, 0xBE, 0x4C, 0xFA, 0x6A, 0x65, 0x71, 0x5A, 0x67, 0x1D, 0x98, 0x16, 0x1C, 0x4F, 0x8F,
    0x6F, 0x2F, 0x11, 0x9A, 0x44, 0xC4, 0xAC, 0x08, 0x41, 0x24, 0xEA, 0xCA, 0xD0, 0x9F, 0x59, 0xC0,
    0x68, 0x96, 0x15, 0x05, 0x91, 0xE3, 0xAB, 0x38, 0x78, 0x17, 0x7A, 0x92, 0x2E, 0x5E, 0xA8, 0xD4,
    0xD3, 0xC5, 0x7D, 0x89, 0x48, 0x40, 0xFB, 0x45, 0x8B, 0xF3, 0x03, 0x97, 0xC7, 0x62, 0x8C, 0x56,
    0x69, 0xDB, 0xB1, 0xB0, 0xCB, 0x8E, 0xC3, 0x6D, 0x83, 0x23, 0x35, 0x54, 0x4A, 0xCE, 0xE2, 0xC2,
    0xD2, 0x1A, 0x0C, 0xE7, 0xF5, 0x5F, 0x0B, 0x36, 0xFF, 0x50, 0x00, 0x5B, 0x32, 0x04, 0x07, 0xAE,
    0x01, 0xA9, 0xFA, 0x1E, 0xD7, 0x4A, 0x54, 0x55, 0x0B, 0x6A, 0x98, 0x63, 0x27, 0x11, 0x4F, 0x1F,
    0x8F, 0x7E, 0xB2, 0x5A, 0x94, 0x6E, 0x26, 0xC3, 0x9D, 0x43, 0x6F, 0xC1, 0x56, 0x58, 0xDB, 0x8E,
    0x1D, 0xFE, 0xA3, 0x71, 0xBD, 0x24, 0xCB, 0x0D, 0xBA, 0x96, 0x42, 0xF6, 0x51, 0x5E, 0x9C, 0x7B,
    0x68, 0xA7, 0x14, 0x1B, 0xCA, 0xFC, 0xCF, 0xC7, 0x93, 0xD2, 0xB0, 0xEC, 0x5F, 0x33, 0x30, 0x25,
    0xEF, 0xA6, 0xCD, 0x87, 0xBE, 0x28, 0x10, 0xAA, 0x00, 0x5B, 0xF8, 0x59, 0x12, 0xCC, 0x20, 0xE7,
    0x3B, 0xF9, 0x1A, 0x6B, 0x39, 0x13, 0x90, 0x08, 0xA8, 0x02, 0xBF, 0xB8, 0x7A, 0x0E, 0x9E, 0x6D,
    0xC2, 0x69, 0x75, 0xD9, 0x64, 0x8A, 0x47, 0x86, 0x4B, 0xF0, 0xDA, 0xB7, 0xDD, 0xFF, 0xEE, 0xF1,
    0x35, 0x81, 0x09, 0xD0, 0x4C, 0x34, 0xE1, 0xBC, 0x82, 0xFD, 0xF4, 0x73, 0x3C, 0xC4, 0xB5, 0xAF,
    0x07, 0x31, 0x8B, 0xE5, 0xB6, 0x17, 0x3D, 0xF3, 0xD6, 0x57, 0x5C, 0x3F, 0x3A, 0x46, 0x2D, 0x18,
    0x49, 0x70, 0x48, 0x8C, 0x44, 0x41, 0xF5, 0x7D, 0xFB, 0xA0, 0x3E, 0x9B, 0xC9, 0xC5, 0x05, 0x0A,
    0x67, 0x53, 0x74, 0x1C, 0x15, 0xF7, 0x83, 0xA1, 0xAE, 0x8D, 0x91, 0xEA, 0x85, 0x9A, 0x16, 0x29,
    0x23, 0xE3, 0xE2, 0xA5, 0xCE, 0x38, 0x88, 0xE4, 0x99, 0x95, 0xB3, 0x72, 0x2A, 0x19, 0x4E, 0x80,
    0xAB, 0x5D, 0xF2, 0x84, 0x92, 0x6C, 0x32, 0xED, 0xE6, 0xDE, 0x7F, 0xC6, 0xE0, 0xC8, 0x65, 0x7C,
    0xBB, 0xE9, 0xB4, 0xEB, 0x61, 0xE8, 0x79, 0x76, 0x62, 0x50, 0xB9, 0x77, 0x2C, 0x78, 0x40, 0x21,
    0x2E, 0xAC, 0x06, 0xD4, 0x4D, 0x22, 0xD5, 0xDC, 0xDF, 0x89, 0x52, 0xC0, 0x66, 0x36, 0x45, 0xD3,
    0x2F, 0xA2, 0x60, 0xD8, 0xAD, 0x37, 0x97, 0x0C, 0xA4, 0x0F, 0x9F, 0xB1, 0x04, 0x2B, 0x03, 0xD1
]

target = [
    0xE9, 0x22, 0xD8, 0x7C, 0x3C, 0x07, 0x54, 0x2D, 0x5E, 0x53, 0x6A, 0xFF, 0x80, 0x5E, 0xCD, 0xC8,
    0xCF, 0xFF, 0x44, 0x74, 0xC8, 0xD8, 0x4B
]


def calc_sum(byte: int, rotations: int) -> int:
    return (c000[(rotations + byte) % len(c000)] + c000[(rotations + byte + 0x100) % len(c000)] + c000[
        (rotations + byte + 0x200) % len(c000)] + c000[(rotations + byte + 0x300) % len(c000)]) & 0xFF


def search(hash_byte: int, rotations: int) -> List[int]:
    potential_outputs = []
    for i in range(0, 0x100):
        checksum = calc_sum(i, rotations)
        if checksum == hash_byte:
            potential_outputs.append(i)
    return potential_outputs


def disp_bytes(b: List[int]) -> str:
    out = ""
    for byte in b:
        out += f"{byte}('{chr(byte)}')"
    return out


print(calc_sum(ord('F'), 0))
print(calc_sum(ord('O'), 1))

for i in range(0, len(target)):
    valid_bytes = search(target[i], i)
    print(f"pass[{i}] = {disp_bytes(valid_bytes)}")
