#!/usr/bin/env python
import io
import argparse
import statistics
import sys
import itertools
import threading
import time
import pexpect
from typing import *

mixtest = [
    0xA7, 0x97, 0xA5, 0x00, 0x20, 0x9C, 0x0F, 0x20, 0x2B, 0xE2, 0x20, 0x01, 0x98, 0x08, 0x00, 0x12,
    0x81, 0x20, 0x99, 0x08, 0x00, 0x12, 0x4C, 0x21, 0x13, 0x10, 0x00, 0x99, 0x30, 0x00, 0x12, 0x4C,
    0x21, 0x99, 0x38, 0x00, 0x12, 0xD6, 0x20, 0x99, 0x08, 0x00, 0x13, 0x00, 0x00, 0x07, 0xA7, 0x4C,
    0x21, 0xFC, 0xF0, 0xA7, 0x71, 0x58, 0x1A, 0x65, 0x3B, 0x20, 0xDF, 0x78, 0x37, 0x4F, 0x21, 0xFC,
    0xC2, 0x54, 0x5F, 0xA4, 0x6D, 0xDD, 0x49, 0x20, 0x49, 0x95, 0x8B, 0x4D, 0x21, 0x67, 0x2A, 0xF2,
    0xF2, 0x5B, 0x1C, 0x01, 0x3B, 0x58, 0x20, 0x8A, 0x4D, 0xFF, 0xFF, 0x64, 0x5B, 0x01, 0x02, 0x3B,
    0x5B, 0x20, 0x5C, 0xB0, 0x51, 0x21, 0xA2, 0x00, 0x00, 0x9D, 0x6D, 0x20, 0xAB, 0xA5, 0x04, 0x00,
    0x9C, 0x7A, 0x20, 0x12, 0xC3, 0x20, 0x99, 0x08, 0x00, 0x05, 0x12, 0xE5, 0x20, 0x99, 0x08, 0x00,
    0x05, 0x4D, 0x49, 0x58, 0x2F, 0x55, 0x4E, 0x4D, 0x49, 0x58, 0x20, 0x6F, 0x70, 0x63, 0x6F, 0x64,
    0x65, 0x73, 0x20, 0x2D, 0x20, 0x70, 0x72, 0x6F, 0x6F, 0x66, 0x20, 0x6F, 0x66, 0x20, 0x63, 0x6F,
    0x6E, 0x63, 0x65, 0x70, 0x74, 0x0A, 0x45, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20, 0x70, 0x61,
    0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x3A, 0x20, 0x00, 0x41, 0x62, 0x6F, 0x72, 0x74, 0x65, 0x64,
    0x2E, 0x0A, 0x00, 0x4E, 0x6F, 0x70, 0x65, 0x2C, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x77, 0x72,
    0x6F, 0x6E, 0x67, 0x2E, 0x0A, 0x00, 0x56, 0x61, 0x6C, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6E, 0x67,
    0x2E, 0x2E, 0x2E, 0x0A, 0x00, 0x59, 0x65, 0x73, 0x2C, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x63,
    0x6F, 0x72, 0x72, 0x65, 0x63, 0x74, 0x21, 0x20, 0x46, 0x4F, 0x4F, 0x4C, 0x53, 0x32, 0x30, 0x32,
    0x33, 0x5F, 0x7B, 0x2A, 0x69, 0x6E, 0x73, 0x65, 0x72, 0x74, 0x20, 0x63, 0x6F, 0x72, 0x72, 0x65,
    0x63, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x68, 0x65, 0x72, 0x65, 0x2A, 0x7D, 0x0A, 0x00,
    0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x61, 0x74, 0x20, 0x61, 0x64, 0x64, 0x72,
    0x65, 0x73, 0x73, 0x20, 0x24, 0x32, 0x30, 0x30, 0x30, 0x2E, 0x0A, 0x00, 0x5F, 0x5F, 0x5F, 0x5F,
    0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F,
    0x5F, 0x5F, 0x5F, 0x5F, 0x00, 0x00, 0x00, 0x00
]


def read8(addr: int) -> int:
    if addr < 0x1000:
        print("read8: nop - from bios")
        return 0xFF if addr % 2 == 0 else 0x0
    elif 0x2000 <= addr < 0x214C:
        print(f"read8: read code ({format(addr, 'X').zfill(4)})")
        return mixtest[addr - 0x2000]
    else:
        print(f"read8: UNDEFINED READ {format(addr, 'X').zfill(4)}")
        return 0x0


def write8(addr: int, value: int):
    if addr < 0x1000:
        print("write8: nop - to bios")
        return
    elif 0x2000 <= addr < 0x214C:
        print(f"write8: write code ({format(addr, 'X')})")
        mixtest[addr - 0x2000] = value
    else:
        print(f"write8: UNDEFINED WRITE {format(addr, 'X').zfill(4)}")
        return


def write16(addr: int, value: int):
    write8(addr, value & 0xFF)
    write8(addr + 1, (value >> 8) & 0xFF)


def read16(addr: int) -> int:
    if addr < 0x1000:
        return 0x00FF
    return read8(addr) | (read8(addr + 1) << 8)


def iteration(input: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:
    r0, r1, r2, r3 = input

    r3 = read8(r0)
    r0 = r1
    # push pc
    write16(r0, r1 & 0xFF)

    r2 = read16(r0)
    write8(r1, r1 & 0xFF)
    r2 += r3
    # DF - endian swap
    r0 = ((r0 >> 8) & 0xFF) | ((r0 & 0xFF) << 8)
    write16(r2, r0)
    r1 += r3
    r3 = read8(r3)
    r0 = r1
    r1 = read16(r0)
    r3 = read16(r3)
    r2 = read8(r1)
    r2 = read8(r1)
    # pop r1
    r1 = 0x2033
    r3 = read8(r1)
    r0 = r1
    write8(r1, r3 & 0xFF)
    r2 = read16(r3)
    r0 = (r0 * 0x583B) & 0xFFFF
    r3 = read8(r1)
    write8(r1, r0 & 0xFF)
    r2 = read16(r3)
    r0 = (r0 * 0x3B02) & 0xFFFF
    r2 = read16(r3)
    r3 = read16(r0)
    r0 = read8(0x2151)

    return r0, r1, r2, r3


def main():
    state = (0, 0, 0, 0)
    for i in range(0, 4):
        print(f" ========== ITERATION {i + 1} ========== ")
        r0, r1, r2, r3 = iteration(state)
        print(
            f"R0={format(r0, 'X').zfill(4)} R1={format(r1, 'X').zfill(4)} R2={format(r2, 'X').zfill(4)} R3={format(r3, 'X').zfill(4)}")
        state = (0, r1, 0x20C3, 0x0)


if __name__ == '__main__':
    main()
